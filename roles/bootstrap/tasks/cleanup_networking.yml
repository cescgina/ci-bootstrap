---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Load network environment definition from file
  when: "crc_ci_bootstrap_networking is not defined or
         crc_ci_bootstrap_networking | length == 0"
  block:
    - name: Check for network environment definition file
      ansible.builtin.stat:
        path: "{{ cifmw_bootstrap_net_env_def_path }}"
      register: _net_env_file_stat

    - name: Slurp network environment definition file
      when: "_net_env_file_stat.stat.exists"
      register: _ci_bootstrap_net_env_slurp
      ansible.builtin.slurp:
        src: "{{ cifmw_bootstrap_net_env_def_path }}"

    - name: Save ci boostrap networking info
      ansible.builtin.set_fact:
        crc_ci_bootstrap_networking: "{{ _ci_bootstrap_net_env_slurp['content'] | b64decode | from_yaml }}"
        cacheable: true

- name: Create openstack config dir
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/openstack/"
    state: directory
    mode: '0755'

- name: Make sure that we have the expected openstacksdk
  ansible.builtin.pip:
    name: "openstacksdk>=0.36,<0.99.0"

- name: Check for cleanup skip flag file presence
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/crc-ci-bootstrap-skip-cleanup"
  register: crc_ci_bootstrap_skip_file_stat

- name: Cleanup the CI CRC environment network
  environment:
    OS_CLOUD: "{{ cifmw_bootstrap_cloud_name }}"
  when: >-
    not (
      (crc_ci_bootstrap_skip_cleanup | default(false) | bool) or
      (crc_ci_bootstrap_skip_file_stat.stat.exists | bool)
    )
  vars:
    subnet_network_name: "{{ crc_ci_bootstrap_subnet_name | default('zuul-ci-subnet-' + zuul.build[:8]) }}"
    router_name: "{{ crc_ci_bootstrap_router_name | default('zuul-ci-subnet-router-' + zuul.build[:8]) }}"
    private_network_name: "{{ crc_ci_bootstrap_network_name | default('zuul-ci-net-' + zuul.build[:8]) }}"
  block:
    - name: Generate clouds config from cloud_secrets secret
      ansible.builtin.template:
        src: clouds.yaml.j2
        dest: "{{ cifmw_bootstrap_clouds_yaml }}"
        mode: "0600"

    - name: Delete ports from each host
      vars:
        instance_id: "{{ hostvars[hostvar_item_key]['nodepool']['external_id'] }}"
      ansible.builtin.include_tasks: network-cleanup-instance-ports.yml
      loop: "{{ hostvars.keys() }}"
      loop_control:
        label: "{{ hostvar_item_key }}"
        loop_var: hostvar_item_key

    - name: Manage router and gateway id needed
      when:
        - crc_ci_bootstrap_networking is defined
        - "'networks' in crc_ci_bootstrap_networking"
        - "'default' in crc_ci_bootstrap_networking['networks']"
        - crc_ci_bootstrap_networking.networks.default.router | default(true) | bool
      block:
        - name: Dettach router from subnet
          register: crc_ci_bootstrap_router_subnet_delete_out
          ansible.builtin.command:
            cmd: "{{ cifmw_bootstrap_venv_dir }}/bin/openstack router remove subnet {{ router_name }} {{ subnet_network_name }}"
          failed_when: >-
            crc_ci_bootstrap_router_subnet_delete_out.rc != 0 and
            (not 'no router found' in crc_ci_bootstrap_router_subnet_delete_out.stderr | lower) and
            (not 'no subnet found' in crc_ci_bootstrap_router_subnet_delete_out.stderr | lower)
          changed_when: crc_ci_bootstrap_router_subnet_delete_out.rc == 0

        - name: Delete router
          register: crc_ci_bootstrap_router_delete_out
          ansible.builtin.command:
            cmd: "{{ cifmw_bootstrap_venv_dir }}/bin/openstack router delete {{ router_name }}"
          failed_when: >-
            crc_ci_bootstrap_router_delete_out.rc != 0 and
            (not 'no router found' in crc_ci_bootstrap_router_delete_out.stderr | lower)
          changed_when: crc_ci_bootstrap_router_delete_out.rc == 0

    - name: Delete subnet
      register: crc_ci_bootstrap_subnet_delete_out
      ansible.builtin.command:
        cmd: "{{ cifmw_bootstrap_venv_dir }}/bin/openstack subnet delete {{ subnet_network_name }}"
      failed_when: >-
        crc_ci_bootstrap_subnet_delete_out.rc != 0 and
        (not 'no subnet found' in crc_ci_bootstrap_subnet_delete_out.stderr | lower)
      changed_when: crc_ci_bootstrap_subnet_delete_out.rc == 0

    - name: Delete network
      register: crc_ci_bootstrap_network_delete_out
      ansible.builtin.command:
        cmd: "{{ cifmw_bootstrap_venv_dir }}/bin/openstack network delete {{ private_network_name }}"
      failed_when: >-
        crc_ci_bootstrap_network_delete_out.rc != 0 and
        (not 'no network found' in crc_ci_bootstrap_network_delete_out.stderr | lower)
      changed_when: crc_ci_bootstrap_network_delete_out.rc == 0
  always:
    - name: Remove clouds.yml secret
      ansible.builtin.file:
        path: "{{ cifmw_bootstrap_clouds_yaml }}"
        state: absent

    - name: Update openstacksdk to latest
      ansible.builtin.pip:
        name: openstacksdk
        state: latest
