---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Create port
  openstack.cloud.port:
    name: "{{ net_item.key }}-{{ instance_id }}"
    network: "{{ ci_bootstrap_os_networks[net_item.key].network.id }}"
    # Deliberately do not set an IP address - managed externally by network mapper
    fixed_ips: []
  register: _ports_out
  loop: "{{ instance_item.value.networks | dict2items }}"
  loop_control:
    label: "{{ net_item.key }}"
    loop_var: net_item

- name: Update fact ci_bootstrap_os_port_map
  ansible.builtin.set_fact:
    ci_bootstrap_os_port_map: >-
      {{ ci_bootstrap_os_port_map | default({}) | combine(
          {
            instance_item.key:
              dict(
                _ports_out.results | 
                map(attribute='net_item.key') |
                zip(_ports_out.results |
                map(attribute='port')))
          }
        )
      }}

- name: Update fact ci_bootstrap_os_mac_addr_map
  ansible.builtin.set_fact:
    ci_bootstrap_os_mac_addr_map: >-
      {{ ci_bootstrap_os_mac_addr_map | default({}) | combine(
          {
            instance_item.key:
              dict(
                _ports_out.results |
                map(attribute='net_item.key') |
                zip(_ports_out.results |
                map(attribute='port.mac_address')))
          }
        )
      }}

- name: Create trunk
  ansible.builtin.command:
    cmd: >-
      {{ cifmw_bootstrap_venv_dir }}/bin/openstack network trunk create
      --parent-port {{ ci_bootstrap_os_port_map[instance_item.key][net_item.key].id }}
      {% for net_name, net in instance_item.value.networks.items()
            if net.trunk_parent is defined
            and net.trunk_parent == net_item.key %}
      --subport port={{ ci_bootstrap_os_port_map[instance_item.key][net_name].id }},segmentation-type=vlan,segmentation-id={{ net.vlan_id }}
      {% endfor %}
      zuul-ci-trunk-{{ net_item.key }}-{{ instance_id }}
      -f value -c id
  register: _create_trunk
  when: net_item.value.is_trunk_parent | default(false)
  loop: "{{ instance_item.value.networks | dict2items }}"
  loop_control:
    label: "{{ net_item.key }}"
    loop_var: net_item
  failed_when: >-
    _create_trunk.rc != 0 and
    (
      not 'is currently in use and is not eligible for use as a parent port' in
        (
          _create_trunk.stderr |
          default(_create_trunk.stdout, true) |
          lower
        )
    )
  changed_when: _create_trunk.rc == 0

- name: Attach ports to instances
  ansible.builtin.command:
    cmd: >-
      {{ cifmw_bootstrap_venv_dir }}/bin/openstack server add port
      {{ instance_id }}
      {{ ci_bootstrap_os_port_map[instance_item.key][net_item.key].id }}
  register: _attach_port
  when: net_item.value.trunk_parent is not defined
  loop: "{{ instance_item.value.networks | dict2items }}"
  loop_control:
    label: "{{ net_item.key }}"
    loop_var: net_item
  failed_when: >-
    _attach_port.rc != 0 and
    (
      not 'is still in use' in
        (
          _attach_port.stderr |
          default(_attach_port.stdout, true) |
          lower
        )
    )
  changed_when: _attach_port.rc == 0
